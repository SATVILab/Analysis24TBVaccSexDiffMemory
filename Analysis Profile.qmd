---
title: Analyse memory response profile
format:
  html:
    embed-resources: true
---

```{r}
#| include: false
library(ggplot2)
library(tibble)
library(dplyr)
library(cowplot)
theme_cowplot_bg <- function() {
  theme_cowplot() +
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white")
  )
}
```

## Data prep

Here we load the data:

```{r}
library(DataTidy24TBVaccSexDiff)
data("data_tidy_vacc_freq")
```

Now we calculate the summed response and the profile response, and then extract the memory response:
```{r}
data_tidy_vacc_profile <- data_tidy_vacc_freq |>
  vacc_calc_response_profile("response") |>
  vacc_calc_vaccine_induced_response("response") |>
  vacc_extract_memory() |>
  dplyr::filter(subset == "cd4") |>
  dplyr::filter(
    vaccine %in% c("h1", "m72")
  )
data_tidy_vacc_profile
```

## EDA
Boxplot of response profile:

```{r}
knitr::kable(data_tidy_vacc_freq|>dplyr::filter(ptid=='mva85a-tb008-5' & subset=='cd4'& timepoint=="168"))
knitr::kable(data_tidy_vacc_profile|>dplyr::filter(ptid=='mva85a-tb008-5'))
```

```{r}
rp_box1 <- ggplot(data_tidy_vacc_profile, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_grid(vaccine + infxn ~ cyt_combn, scales = "free") +
  labs(title = "Response by Sex and Infection Status for each Cytokine Combination",
       x = "Sex",
       y = "Response") +
  theme_cowplot_bg() +
  cowplot::background_grid(major = "xy") +
  geom_hline(yintercept = 0, col = "black")
   
ggsave('Profile by cytokine combination.png',rp_box1)

 #subset boxplot filtering 2 vaccines
selected_vaccines <- c('h1', 'm72')

# Selected 2 vaccines project slides
# Filter the dataset
filtered_data <- data_tidy_vacc_profile %>%
  filter(vaccine %in% selected_vaccines)

rp_box2 <- ggplot(filtered_data, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_grid(vaccine + infxn ~ cyt_combn, scales = "free") +
  #facet_grid(vaccine ~ infxn,labeller = labeller(vaccine = toupper)) +
  labs(title = "Response by Sex and Infection Status for each Cytokine Combination",
       x = "Sex",
       y = "Response") +
  theme_cowplot_bg() +
  theme(axis.text.x = element_blank(),        # Remove x-axis text
    axis.ticks.x = element_blank(),
    legend.position = 'bottom')+   
  background_grid(major='y')+
  guides(fill = guide_legend(title = NULL))   

ggsave('Profile boxplot 2.png',rp_box2)  
```

## PCA Biplot

### Uninfected
For Uninfected Individuals(included only 'g+2+t+','g-2+t+' and 'g-2+t-' cytokine combinations 
as per Rodo(2019)):

```{r}
#create a wide format where each cytokine combination is a separate column
profile_wide <- data_tidy_vacc_profile |>
# Filter for uninfected individuals and specific cytokine combinations
  filter(infxn == "uninfected" & cyt_combn %in% c("g+2+t+", "g-2+t+", "g-2+t-")) %>%
  tidyr::pivot_wider(names_from = cyt_combn, values_from = response)

# Select only the cytokine combination columns for PCA
cytokine_cols <- colnames(profile_wide)[grepl("\\+", colnames(profile_wide))]
pca_result <- prcomp(profile_wide[, cytokine_cols], scale. = TRUE)  

# combine PCA results with the original metadata
pca_data <- as.data.frame(pca_result$x) |>
  dplyr::bind_cols(profile_wide |>
  dplyr::select(vaccine, sex, infxn))

pca_data <- pca_data |>
  mutate(vaccine = toupper(vaccine),  # Capitalize the vaccine names
         sex = toupper(sex)           # Capitalize the sex values
  ) |>
  rename(Vaccine = vaccine, Sex = sex)

# extract PCA loadings
loadings <- as.data.frame(pca_result$rotation[, 1:2]) # Take only the first two PCs
loadings$cyt_combn <- rownames(loadings) # Add cytokine combination names

# scaling factor for arrows
arrow_scale <- 8.5  

# scale PCA loadings for arrows
scaled_loadings <- loadings |>
  dplyr::mutate(PC1 = PC1 * arrow_scale,
         PC2 = PC2 * arrow_scale)

pca_var <- pca_result$sdev^2
pca_var_explained <- pca_var / sum(pca_var)
pc1_var <- scales::percent(pca_var_explained[1])
pc2_var <- scales::percent(pca_var_explained[2])
```

Plot the PCA Biplot for Uninfected Individuals:

```{r}
pca_uninf <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Vaccine, shape = Sex)) +
  geom_point(size = 3) +
  labs(title = " ", x = "PC1(59%)", y = "PC2(33%)") + 
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.3, "cm")), color = "black", inherit.aes = FALSE) +
  geom_text(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), nudge_x = 1.5, nudge_y = 0.4, vjust = 1, hjust = 1, color = "black", inherit.aes = FALSE) +
  theme_cowplot_bg()  
ggsave('PCA_uninf.png', pca_uninf, width = 12, height = 6)
```

PCA biplot with mean positions shown for each vaccine sex combo for uninfected Individuals:
```{r}
# calculate mean positions for each vaccine and sex combination
pca_data <- pca_data |>
  mutate(vaccine = toupper(vaccine),  # Capitalize the vaccine names
         sex = toupper(sex)           # Capitalize the sex values
  ) |>
  rename(Vaccine = vaccine, Sex = sex)

mean_positions <- pca_data %>%
  dplyr::group_by(Vaccine, Sex,infxn) %>%
  dplyr::summarize(PC1 = mean(PC1), PC2 = mean(PC2))

mean_positions <- mean_positions %>%
  dplyr::mutate(combo = paste(Vaccine, Sex, sep = "-"))

pca_mean_uninf <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Vaccine, shape = Sex)) +
  labs( 
       x = paste0("PC1 (", pc1_var, ")"), 
       y = paste0("PC2 (", pc2_var, ")")) +
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.3, "cm")), color = "black", inherit.aes = FALSE) +
  geom_text(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), 
            nudge_x = 1.5, nudge_y = 0.4, vjust = 1, hjust = 1, color = "black", 
            inherit.aes = FALSE) +
  geom_point(size = 3) +          
  geom_point(data = mean_positions, aes(x = PC1, y = PC2, color = Vaccine), 
             shape=1, fill=NA, size = 4, stroke=1.5) +
  ggrepel::geom_text_repel(data = mean_positions, aes(x = PC1, y = PC2, label = combo), 
            nudge_x = 1, nudge_y = 0.5, vjust = 1, hjust = 1, color = "black") +
  theme_cowplot_bg()+ 
  theme(axis.text.x = element_blank(),        # Remove x-axis text
    axis.ticks.x = element_blank())

ggsave('pca_mean_uninf.png', pca_mean_uninf,width =10, height=6)   
```

### Infected

For Infected Individuals(included only 'g+2+t+' and 'g+2-t-' cytokine combinations as per Rodo(2019)):

```{r}
#create a wide format where each cytokine combination is a separate column
profile_wide <- data_tidy_vacc_profile |>
# Filter for uninfected individuals and specific cytokine combinations
  filter(infxn == "infected" & cyt_combn %in% c("g+2+t+", "g+2-t-")) %>%
  tidyr::pivot_wider(names_from = cyt_combn, values_from = response)

# Select only the cytokine combination columns for PCA
cytokine_cols <- colnames(profile_wide)[grepl("\\+", colnames(profile_wide))]
pca_result <- prcomp(profile_wide[, cytokine_cols], scale. = TRUE)  

# combine PCA results with the original metadata
pca_data <- as.data.frame(pca_result$x) |>
  dplyr::bind_cols(profile_wide |>
  dplyr::select(vaccine, sex, infxn))

pca_data <- pca_data |>
  mutate(vaccine = toupper(vaccine),  # Capitalize the vaccine names
         sex = toupper(sex)           # Capitalize the sex values
  ) |>
  rename(Vaccine = vaccine, Sex = sex)

# extract PCA loadings
loadings <- as.data.frame(pca_result$rotation[, 1:2]) # Take only the first two PCs
loadings$cyt_combn <- rownames(loadings) # Add cytokine combination names

# scaling factor for arrows
arrow_scale <- 8.5  

# scale PCA loadings for arrows
scaled_loadings <- loadings |>
  dplyr::mutate(PC1 = PC1 * arrow_scale,
         PC2 = PC2 * arrow_scale)

pca_var <- pca_result$sdev^2
pca_var_explained <- pca_var / sum(pca_var)
pc1_var <- scales::percent(pca_var_explained[1])
pc2_var <- scales::percent(pca_var_explained[2])
```

Plot the PCA Biplot for Infected Individuals:

```{r}
pca_inf <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Vaccine, shape = Sex)) +
  geom_point(size = 3) +
  #facet_wrap(~ infxn) +
  labs(title = " ", x = "PC1(55%)", y = "PC2(45%)") + 
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.3, "cm")), color = "black", inherit.aes = FALSE) +
  geom_text(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), nudge_x = 1.5, nudge_y = 0.4, vjust = 1, hjust = 1, color = "black", inherit.aes = FALSE) +
  theme_cowplot_bg()  
ggsave('PCA_inf.png', pca_inf, width = 12, height = 6)
```

PCA biplot with mean positions shown for each vaccine sex combo for Infected Individuals:
```{r}
pca_data <- pca_data |>
  mutate(vaccine = toupper(vaccine),  # Capitalize the vaccine names
         sex = toupper(sex)           # Capitalize the sex values
  ) |>
  rename(Vaccine = vaccine, Sex = sex)
# calculate mean positions for each vaccine and sex combination
mean_positions <- pca_data %>%
  dplyr::group_by(Vaccine, Sex,infxn) %>%
  dplyr::summarize(PC1 = mean(PC1), PC2 = mean(PC2))

mean_positions <- mean_positions %>%
  dplyr::mutate(combo = paste(Vaccine, Sex, sep = "-"))

pca_mean_inf <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Vaccine, shape = Sex)) +
  labs(title = " ", 
       x = paste0("PC1 (", pc1_var, ")"), 
       y = paste0("PC2 (", pc2_var, ")")) +
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.3, "cm")), color = "black", inherit.aes = FALSE) +
  geom_text(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), 
            nudge_x = 1.5, nudge_y = 0.4, vjust = 1, hjust = 1, color = "black", 
            inherit.aes = FALSE) +
  geom_point(size = 3) +          
  geom_point(data = mean_positions, aes(x = PC1, y = PC2, color = Vaccine), 
             shape=1, fill=NA, size = 4, stroke=1.5) +
  ggrepel::geom_text_repel(data = mean_positions, aes(x = PC1, y = PC2, label = combo), 
            nudge_x = 1, nudge_y = 0.5, vjust = 1, hjust = 1, color = "black") +
  theme_cowplot_bg()+ 
  theme(axis.text.x = element_blank(),        # Remove x-axis text
    axis.ticks.x = element_blank())

ggsave('PCA_mean_inf.png', pca_mean_inf,width =10, height=6)   
```

## Analysis of Response Profile: 
Transform response to lie between 0 and 1 using proportions:
```{r}
data_tidy_vacc_profile <- data_tidy_vacc_profile |>
  dplyr::mutate(response = pmax(0, response)) |> 
  dplyr::mutate(response_proportion = sqrt(response / 100) + 1e-6)
```

Identify individuals for which the sum of absolute changes from pre-vaccination(vaccine-induced summed response) was 0.02 or more:
```{r}
participant_ids <- data_tidy_vacc_profile %>%
  filter(response >= 0.02) %>%
  pull(ptid)
```

## Linear Models
For infected individuals 
```{r}
# Filter data to include only infected individuals
# Convert `sex` to a factor for modeling
inf_data <- data_tidy_vacc_profile %>%
  filter(ptid %in% participant_ids)|>
  filter(infxn == "infected") %>%
  mutate(sex = factor(sex, levels = c("male", "female")))

# Split data by vaccine
vaccine_inf <- inf_data %>%
  group_by(vaccine) %>%
  group_split()
```

Fit linear models to assess the effect of sex on the immune response profile for infected individuals:
```{r}
# Initialize list to store models
lm_inf <- list()

# Loop through each vaccine group, fit LM and store results
for (group in vaccine_inf) {
  vaccine <- unique(group$vaccine)
  model <- lm(response ~ sex, data = group) 
  lm_inf[[vaccine]] <- model
}
summary(lm_inf[['h1']])
summary(lm_inf[['m72']])
```

Fit linear models to assess the effect of sex on the immune response profile for each cytokine combination for infected individuals:
```{r}
# Initialize list to store models for each vaccine and cytokine combination
lm_inf <- list()

# Loop through each vaccine group and fit LM for every cytokine combination
for (group in vaccine_inf) {
  vaccine <- unique(group$vaccine)
  
  # Split the group further by cytokine combination
  cyt_combn_groups <- group %>%
    group_by(cyt_combn) %>%
    group_split()
  
  # Initialize sublist for each vaccine
  lm_inf[[vaccine]] <- list()
  
  # Fit models for each cytokine combination
  for (cytokine_group in cyt_combn_groups) {
    cytokine <- unique(cytokine_group$cyt_combn)
    model <- lm(response ~ sex, data = cytokine_group)
    
    # Store the model in the list under the vaccine and cytokine combination
    lm_inf[[vaccine]][[cytokine]] <- model
  }
}

# Loop through all vaccines and their cytokine combinations to obtain results
for (vaccine in names(lm_inf)) {
  cat("Vaccine:", vaccine, "\n")
  
  for (cytokine in names(lm_inf[[vaccine]])) {
    cat("\nCytokine Combination:", cytokine, "\n")
    print(summary(lm_inf[[vaccine]][[cytokine]]))
    cat("\n--------------------------------------------\n")
  }
}
```

For uninfected individuals:
```{r}
# Filter data to include only uninfected individuals
# Convert `sex` to a factor for modeling
uninf_data <- data_tidy_vacc_profile %>%
  filter(ptid %in% participant_ids)|>
  filter(infxn == "uninfected") %>%
  mutate(sex = factor(sex, levels = c("male", "female")))

# Split data by vaccine
vaccine_uninf <- uninf_data %>%
  group_by(vaccine) %>%
  group_split()
```

Fit linear models for each vaccine to assess the effect of sex on the immune response profile for uninfected individuals:
```{r}
# Initialize list to store models
lm_uninf <- list()

# Loop through each vaccine group, fit LM and store results
for (group in vaccine_uninf) {
  vaccine <- unique(group$vaccine)
  model <- lm(response ~ sex, data = group)
  lm_uninf[[vaccine]] <- model
}
summary(lm_uninf[['h1']])
summary(lm_uninf[['m72']])
```

Fit linear models to assess the effect of sex on the immune response profile for each cytokine combination for uninfected individuals:
```{r}
# Initialize list to store models for each vaccine and cytokine combination
lm_uninf <- list()

# Loop through each vaccine group and fit LM for every cytokine combination
for (group in vaccine_uninf) {
  vaccine <- unique(group$vaccine)
  
  # Split the group further by cytokine combination
  cyt_combn_groups <- group %>%
    group_by(cyt_combn) %>%
    group_split()
  
  # Initialize sublist for each vaccine
  lm_uninf[[vaccine]] <- list()
  
  # Fit models for each cytokine combination
  for (cytokine_group in cyt_combn_groups) {
    cytokine <- unique(cytokine_group$cyt_combn)
    model <- lm(response ~ sex, data = cytokine_group)
    
    # Store the model in the list under the vaccine and cytokine combination
    lm_uninf[[vaccine]][[cytokine]] <- model
  }
}

# Loop through all vaccines and their cytokine combinations to obtain results
for (vaccine in names(lm_uninf)) {
  cat("Vaccine:", vaccine, "\n")
  
  for (cytokine in names(lm_uninf[[vaccine]])) {
    cat("\nCytokine Combination:", cytokine, "\n")
    print(summary(lm_uninf[[vaccine]][[cytokine]]))
    cat("\n--------------------------------------------\n")
  }
}
```


# Beta Regression
Fit beta regression model for infected individuals with interaction term
```{r}
library(betareg)
library(statmod)
library(numDeriv)

full_model_inf <- betareg(response_proportion ~ sex * vaccine * cyt_combn, data = data_tidy_vacc_profile|>
                  dplyr::filter(ptid %in% participant_ids)|>
                  dplyr::filter(infxn =="infected"))

summary(full_model_inf)

library(purrr)

# Split the dataset by cytokine combination
cytokine_splits <- data_tidy_vacc_profile %>%
  filter(ptid %in% participant_ids)|>
  filter(infxn == "infected") %>%
  split(.$cyt_combn)

# Fit beta regression model for each cytokine combination
beta_models_inf <- map(cytokine_splits, function(data) {
  betareg(response_proportion ~ sex * vaccine, data = data)
})
beta_models_inf
```

Fit the models excluding the mva85a and h56 vaccines due to small sample sizes (and no difference in magnitude)

```{r}
cytokine_splits <- data_tidy_vacc_profile %>%
  filter(ptid %in% participant_ids) %>%
  dplyr::filter(
    cyt_combn %in% c("g+2+t+", "g+2-t-")
  ) |>
  filter(infxn == "infected") %>%
  filter(!vaccine %in% c("mva85a", "h56")) %>%  # Exclude specific vaccines
  split(.$cyt_combn)

# Fit beta regression model for each cytokine combination
beta_models2 <- map(cytokine_splits, function(data) {
  betareg(response_proportion ~ sex * vaccine, data = data)
})
beta_models2

# Fit beta regression model for each cytokine combination
comp_models_inf <- map(cytokine_splits, function(data) {
  beta_fit <- betareg(response_proportion ~ sex * vaccine, data = data)
  lm_fit <- lm(response_proportion ~ sex * vaccine, data = data)
  list("beta" = beta_fit, "lm" = lm_fit)
})
model_results_comp <- lapply(comp_models_inf, function(x) {
  list("beta" = BIC(x$beta), "lm" = BIC(x$lm))
})
```


Fit beta regression model for uninfected individuals with interaction term
```{r}
full_model_uninf <- betareg(response_proportion ~ sex * vaccine * cyt_combn, data = data_tidy_vacc_profile|>
                  dplyr::filter(ptid %in% participant_ids)|>
                  dplyr::filter(infxn =="uninfected"))

summary(full_model_uninf1)

# Split the dataset by cytokine combination
cytokine_splits <- data_tidy_vacc_profile %>%
  filter(ptid %in% participant_ids)|>
  filter(infxn == "uninfected") %>%
  split(.$cyt_combn)

# Fit beta regression model for each cytokine combination
beta_models_uninf <- map(cytokine_splits, function(data) {
  betareg(response_proportion ~ sex * vaccine, data = data)
})
beta_models_uninf
```

# Global Test For infected individuals only 
```{r}
results_list <- list()

# Get unique cytokine combinations from the data
cyt_combinations <- unique(data_tidy_vacc_profile$cyt_combn)
cyt_combinations <- c("g+2+t+", "g+2-t-")
# Loop over each cytokine combination
for (cyt in cyt_combinations) {
  
  # Filter data for the current cytokine combination and infected individuals
  data_cyt <- data_tidy_vacc_profile |> 
    dplyr::filter(ptid %in% participant_ids) |>
    dplyr::filter(cyt_combn == cyt, infxn == "infected")
  
  # Full model with sex and vaccine interaction
  full_model_inf <- betareg(
    response_proportion ~ sex * vaccine,
    data = data_cyt
  )
  
  # Null model without sex effect
  null_model_inf <- betareg(
    response_proportion ~ vaccine,
    data = data_cyt
  )
  
  # Perform Wald test
  Wald_test <- car::linearHypothesis(
    full_model_inf,
    c("sexmale = 0", "sexmale:vaccinem72 = 0")
  )
  
  # Perform likelihood ratio test
  likelihood_test <- lmtest::lrtest(full_model_inf, null_model_inf)
  
  # Extract p-values for both tests
  p_values <- c(Wald_test$`Pr(>Chisq)`[2], likelihood_test$`Pr(>Chisq)`[2])
  
  # Store the results in a tibble (without adjustment yet)
  result_tbl <- tibble(
    Cytokine_Combination = cyt,
    Test = c("Wald", "Likelihood Ratio"),
    `P-value` = p_values
  )
  
  # Append the result for the current cytokine combination to the results list
  results_list[[cyt]] <- result_tbl
}

# Combine the results for all cytokine combinations into a single tibble
final_results_inf <- bind_rows(results_list)

# Apply Holm adjustment to the p-values grouped by the test type
final_results_inf <- final_results_inf |> 
  dplyr::group_by(Test) |> 
  dplyr::mutate(`Holm-adjusted P-value` = p.adjust(`P-value`, method = "holm")) |> 
  dplyr::ungroup()

# View final results with Holm-adjusted p-values
final_results_inf
```

## Individual Models

```{r}
cyt_combinations <- c("g+2+t+", "g+2-t-")

# Loop over each cytokine combination
for (cyt in cyt_combinations) {
  
  # Filter data for the current cytokine combination and infected individuals
  data_cyt <- data_tidy_vacc_profile |> 
    dplyr::filter(ptid %in% participant_ids) |>
    dplyr::filter(cyt_combn == cyt, infxn == "infected")
 
  # Fit beta regression model
  beta_model <- betareg(
    response_proportion ~ sex * vaccine,
    data = data_cyt
  )
  
  # Print the model summary for the current cytokine combination
  cat("\nSummary for Cytokine Combination:", cyt, "\n")
  print(summary(beta_model))
}
```


## Getting per-vaccine sex effect estimates and inference 

For "g+2+t+":

```{r}
# Filter data for the current cytokine combination and infected individuals
data <- data_tidy_vacc_profile |> 
  dplyr::filter(ptid %in% participant_ids) |>
  dplyr::filter(cyt_combn == "g+2+t+", infxn == "infected")

# H1
full_model_h1 <- betareg(
  response_proportion ~ sex * vaccine,
  data = data |> 
    dplyr::mutate(vaccine = factor(vaccine, levels = c("h1", "m72")))
)

est_h1 <- summary(full_model_h1)$coefficients[[1]]["sexmale", "Estimate"]
p_val_h1 <- summary(full_model_h1)$coefficients[[1]]["sexmale", "Pr(>|z|)"]
ci_h1 <- confint(full_model_h1)[2, c("2.5 %", "97.5 %")]
h1_row <- tibble(
  Vaccine = "H1",
  Estimate = est_h1,
  `95% CI Lower` = ci_h1[1],
  `95% CI Upper` = ci_h1[2],
  `P-value` = p_val_h1
)

#M72
full_model_m72 <- betareg(
  response_proportion ~ sex * vaccine,
  data = data |> 
    dplyr::mutate(vaccine = factor(vaccine, levels = c("m72","h1")))
)

est_m72 <- summary(full_model_m72)$coefficients[[1]]["sexmale", "Estimate"]
p_val_m72 <- summary(full_model_m72)$coefficients[[1]]["sexmale", "Pr(>|z|)"]
ci_m72 <- confint(full_model_m72)[2, c("2.5 %", "97.5 %")]
m72_row <- tibble(
  Vaccine = "M72",
  Estimate = est_m72,
  `95% CI Lower` = ci_m72[1],
  `95% CI Upper` = ci_m72[2],
  `P-value` = p_val_m72
)

inf_tbl_inf <- bind_rows(h1_row, m72_row)
inf_tbl_inf <- inf_tbl_inf |> 
  dplyr::mutate(`Q-value` = p.adjust(`P-value`, method = "holm")) |>
  dplyr::select(Vaccine, Estimate, `P-value`, `Q-value`, `95% CI Lower`, `95% CI Upper`)

inf_tbl_inf <- inf_tbl_inf |> 
  dplyr::mutate(
    `P-value` = ifelse(`P-value` < 0.001, "<0.001", round(as.numeric(`P-value`), 3))
  )

# Plot with p-values
p_inf <- ggplot(
  inf_tbl_inf,
  aes(
    x = Vaccine,
    y = Estimate,
    ymin = `95% CI Lower`,
    ymax = `95% CI Upper`,
    color = Vaccine
  )
) +
  theme_cowplot_bg() +
  cowplot::background_grid(major = "y") + 
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  geom_pointrange() +
  labs(x = "Vaccine", y = "Sex effect") +
  geom_errorbar(aes(ymin = `95% CI Lower`, ymax = `95% CI Upper`), width = 0.1) +
  scale_color_manual(
    values = c("H1" = "blue","M72" = "green")
  ) +
  scale_y_continuous(limits = c(min(inf_tbl_inf$`95% CI Lower`, na.rm = TRUE), 
                                max(inf_tbl_inf$`95% CI Upper`, na.rm = TRUE) + 0.1)) +
  #scale_y_continuous(limits = c(NA, 0.6)) +
  theme(
    legend.position = "none",
    axis.title.x = element_text(size = 20),  # Increase x-axis label size
    axis.title.y = element_text(size = 20),   # Increase y-axis label size
    axis.text.x = element_text(size = 19),   # Adjust x-axis tick label size
    axis.text.y = element_text(size = 19)  
  ) +
  # Add p-value text labels
  geom_text(
    aes(label = `P-value`, y =  `95% CI Upper`+0.04),
    vjust = -0.5,
    size = 6,
    color = "black"
  )

path_fig_inf <- "Effect sizes and CI response_profile_memory1.pdf"
ggsave(
  path_fig_inf,
  p_inf,
  width = 10,
  height = 6
)
```

For "g+2-t-":

```{r}
# Filter data for the current cytokine combination and infected individuals
data <- data_tidy_vacc_profile |> 
  dplyr::filter(ptid %in% participant_ids) |>
  dplyr::filter(cyt_combn == "g+2-t-", infxn == "infected")

# H1
full_model_h1 <- betareg(
  response_proportion ~ sex * vaccine,
  data = data |> 
    dplyr::mutate(vaccine = factor(vaccine, levels = c("h1", "m72")))
)

est_h1 <- summary(full_model_h1)$coefficients[[1]]["sexmale", "Estimate"]
p_val_h1 <- summary(full_model_h1)$coefficients[[1]]["sexmale", "Pr(>|z|)"]
ci_h1 <- confint(full_model_h1)[2, c("2.5 %", "97.5 %")]
h1_row <- tibble(
  Vaccine = "H1",
  Estimate = est_h1,
  `95% CI Lower` = ci_h1[1],
  `95% CI Upper` = ci_h1[2],
  `P-value` = p_val_h1
)

#M72
full_model_m72 <- betareg(
  response_proportion ~ sex * vaccine,
  data = data |> 
    dplyr::mutate(vaccine = factor(vaccine, levels = c("m72","h1")))
)

est_m72 <- summary(full_model_m72)$coefficients[[1]]["sexmale", "Estimate"]
p_val_m72 <- summary(full_model_m72)$coefficients[[1]]["sexmale", "Pr(>|z|)"]
ci_m72 <- confint(full_model_m72)[2, c("2.5 %", "97.5 %")]
m72_row <- tibble(
  Vaccine = "M72",
  Estimate = est_m72,
  `95% CI Lower` = ci_m72[1],
  `95% CI Upper` = ci_m72[2],
  `P-value` = p_val_m72
)

inf_tbl_inf <- bind_rows(h1_row, m72_row)
inf_tbl_inf <- inf_tbl_inf |> 
  dplyr::mutate(`Q-value` = p.adjust(`P-value`, method = "holm")) |>
  dplyr::select(Vaccine, Estimate, `P-value`, `Q-value`, `95% CI Lower`, `95% CI Upper`)

inf_tbl_inf <- inf_tbl_inf |> 
  dplyr::mutate(
    `P-value` = ifelse(`P-value` < 0.001, "<0.001", round(as.numeric(`P-value`), 3))
  )

# Plot with p-values
p_inf <- ggplot(
  inf_tbl_inf,
  aes(
    x = Vaccine,
    y = Estimate,
    ymin = `95% CI Lower`,
    ymax = `95% CI Upper`,
    color = Vaccine
  )
) +
  theme_cowplot_bg() +
  cowplot::background_grid(major = "y") + 
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  geom_pointrange() +
  labs(x = "Vaccine", y = "Sex effect") +
  geom_errorbar(aes(ymin = `95% CI Lower`, ymax = `95% CI Upper`), width = 0.1) +
  scale_color_manual(
    values = c("H1" = "blue","M72" = "green")
  ) +
  scale_y_continuous(limits = c(min(inf_tbl_inf$`95% CI Lower`, na.rm = TRUE), 
                                max(inf_tbl_inf$`95% CI Upper`, na.rm = TRUE) + 0.1)) +
  #scale_y_continuous(limits = c(NA, 0.6)) +
  theme(
    legend.position = "none",
    axis.title.x = element_text(size = 20),  # Increase x-axis label size
    axis.title.y = element_text(size = 20),   # Increase y-axis label size
    axis.text.x = element_text(size = 19),   # Adjust x-axis tick label size
    axis.text.y = element_text(size = 19)  
  ) +
  # Add p-value text labels
  geom_text(
    aes(label = `P-value`, y =  `95% CI Upper`+0.04),
    vjust = -0.5,
    size = 6,
    color = "black"
  )

path_fig_inf <- "Effect sizes and CI response_profile_memory2.pdf"
ggsave(
  path_fig_inf,
  p_inf,
  width = 10,
  height = 6
)
```

### Non-parametric

For g+2+t+:
```{r}
library(dplyr)
library(purrr)

mw_tbl_summed <- purrr::map_df(unique(data_tidy_vacc_summed$infxn), function(infxn) {
  data_tidy_vacc_sub <- data_tidy_vacc_profile |>
    dplyr::filter(infxn == .env$infxn) |>
    dplyr::filter(cyt_combn == "g+2+t+")
  
  purrr::map_df(unique(data_tidy_vacc_sub$vaccine), function(vaccine) {
    data_tidy_vacc_sub_sub <- data_tidy_vacc_sub |>
      dplyr::filter(vaccine == .env$vaccine)
    
    resp_vec_male <- data_tidy_vacc_sub_sub |>
      dplyr::filter(sex == "male") |>
      dplyr::pull(response)
    resp_vec_female <- data_tidy_vacc_sub_sub |>
      dplyr::filter(sex == "female") |>
      dplyr::pull(response)
    
    # Allow approximate p-value computation
    p_val <- wilcox.test(resp_vec_male, resp_vec_female, exact = FALSE)$p.value
    
    tibble::tibble(
      infxn = infxn, vaccine = vaccine, p_val = p_val
    )
  })
})

mw_tbl_summed <- mw_tbl_summed |>
  dplyr::group_by(infxn) |>
  dplyr::mutate(q_val = p.adjust(p_val, method = "holm")) |>
  dplyr::ungroup()

mw_tbl_summed|>filter(infxn=="infected")

```