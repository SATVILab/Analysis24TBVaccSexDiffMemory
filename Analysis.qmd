---
title: Analyse memory response
format:
  html:
    embed-resources: true
---

```{r}
#| include: false
library(ggplot2)
library(tibble)
library(dplyr)
```

## Data prep

Here we load the data:

```{r}
library(DataTidy24TBVaccSexDiff)
data("data_tidy_vacc_freq")
```

Now we calculate the summed response and the profile response, and then extract the memory response:

```{r}
data_tidy_vacc_summed <- data_tidy_vacc_freq |>
  vacc_calc_response_summed("response") |>
  vacc_calc_vaccine_induced_response("response") |>
  vacc_set_neg_to_zero("response") |>
  vacc_extract_memory() |>
  dplyr::filter(subset == "cd4")
data_tidy_vacc_summed
data_tidy_vacc_profile <- data_tidy_vacc_freq |>
  vacc_calc_response_profile("response") |>
  vacc_calc_vaccine_induced_response("response") |>
  vacc_extract_memory() |>
  dplyr::filter(subset == "cd4")
data_tidy_vacc_profile
```

```{r}
install.packages("cowplot")
library(cowplot)
``` 

## Respose Magnitude

### EDA 
```{r}
# Plot histogram of response magnitude grouped by vaccine and sex
hist <- ggplot(data_tidy_vacc_summed, aes(x = response, fill = sex)) +
  geom_histogram(binwidth = 1, color = "blue", position = "dodge") +
  facet_grid(vaccine ~ sex) +
  labs(title = "Histogram of Response Magnitudes by Vaccine and Sex", x = "Response Magnitude", y = "Frequency") +
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "black"))

ggsave("histograms.png", hist)
```

```{r}
# Boxplot of response magnitude by grouped vaccine and sex
boxplot <- ggplot(data_tidy_vacc_summed, aes(x = vaccine, y = response, fill = sex)) +
  geom_boxplot() +
  facet_wrap(~ sex) +
  labs(title = "Boxplot of Response Magnitudes by Vaccine and Sex", x = "Vaccine", y = "Response Magnitude") +
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "black"))

ggsave("boxplot by vaccine and sex.png", boxplot)
```

### Kruskal-Wallis test 
 - "used to determine if there are statistically significant differences between two or more groups of an independent variable on a continuous or ordinal dependent variable."

```{r}
# Kruskal-Wallis test group by vaccine and infection status
kw_test <- data_tidy_vacc_summed |>
  group_by(vaccine, infxn) |>
  summarise(
    test = list(kruskal.test(response ~ sex)),
    .groups = 'drop') |>
  mutate(
    t_stat = sapply(test, function(x) x$statistic),
    p_value = sapply(test, function(x) x$p.value))

kw_test
```

```{r}
# Summary stats after performing kruskal- wallis test
summary_stats <- data_tidy_vacc_summed |>
  group_by(vaccine,infxn, sex) |>
  summarise(
    count = n(),
    mean = mean(response),
    sd = sd(response),
    median = median(response),
    IQR = IQR(response))

summary_stats
```

### Analysis
```{r}
boxplot2 <- ggplot(data_tidy_vacc_summed, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_grid(vaccine ~ infxn) +
  labs(title = "Boxplot of Response Magnitude by Infection Status and Sex", x = "Sex", y = "Response Magnitude") +
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "black"))

ggsave("boxplot by infection status and sex.png", boxplot2)
```

Mann- Whitney Test with multiple testing error rate correction:

```{r}
mw_test <- list(
  infxn = wilcox.test(response ~ infxn, data = data_tidy_vacc_summed),
  sex = wilcox.test(response ~ sex, data = data_tidy_vacc_summed)
)
p_values <- sapply(mw_test, function(test) test$p.value)
p_values
p_adjusted <- p.adjust(p_values, method = "holm")
p_adjusted
```

Taking the square root of the summed response:
```{r}
#data_tidy_vacc_summed <- data_tidy_vacc_summed |>
  #mutate(sqrt_response = sqrt(response))
```

### Betareg Model
```{r}
 Install and load package
install.packages("betareg")
install.packages("statmod")
install.packages("numDeriv")
library(betareg)
library(statmod)
library(numDeriv)
```

Transform the response magnitude to range between 0 and 1 and taking the sqrt
```{r}
data_tidy_vacc_summed <- data_tidy_vacc_summed |>
  mutate(prop_response = sqrt(response / 100))
```

Fitting the Beta Regression model for infected: 
```{r}
model_infected <- betareg(prop_response ~ vaccine*sex, data_tidy_vacc_summed |> dplyr::filter(infxn =="infected"))
summary(model_infected)

# Plotting the residuals for infected
png("residuals_infected.png")
plot(model_infected$residuals, main = "Residuals of the infected Beta Regression Model")
abline(h= 0, col= "red", lwd= 2)
dev.off()

# Betareg model for each vaccine and p-values
data_tidy_vacc_summed_inf <- data_tidy_vacc_summed |>  
    dplyr::filter(infxn == "infected") 

beta_h1_inf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_inf |>
    dplyr::filter(vaccine == "h1")) 

beta_h56_inf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_inf |> 
   dplyr::filter(vaccine == "h56")) 

beta_mva85a_inf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_inf |> 
   dplyr::filter(vaccine == "mva85a"))

p_vec_vaccine_inf <- c(
  summary(beta_h1_inf)$coefficients$mu[2, 4],
  summary(beta_h56_inf)$coefficients$mu[2, 4],
  summary(beta_mva85a_inf)$coefficients$mean[2, 4]
)
p_vec_vaccine_inf

p.adjust(p_vec_vaccine_inf, method = "holm")
```

Fitting the Beta Regression model for uninfected: 
```{r}
model_uninfected <- betareg(prop_response ~ vaccine*sex, data_tidy_vacc_summed|> dplyr::filter(infxn == "uninfected"))
summary(model_uninfected)

# Plotting Residuals for uninfected
png("residuals_uninfected.png")
plot(model_uninfected$residuals, main = "Residuals of the uninfected Beta Regression Model")
abline (h=0, col = "red", lwd= 2)
dev.off()

# Betareg models for each vaccine and p-values
data_tidy_vacc_summed_uninf <- data_tidy_vacc_summed |>  
    dplyr::filter(infxn == "uninfected") 

beta_h1_uninf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_uninf |>
    dplyr::filter(vaccine == "h1")) 

beta_h56_uninf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_uninf |> 
   dplyr::filter(vaccine == "h56")) 

beta_mva85a_uninf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_uninf |> 
   dplyr::filter(vaccine == "mva85a"))

p_vec_vaccine_uninf <- c(
  summary(beta_h1_uninf)$coefficients$mu[2, 4],
  summary(beta_h56_uninf)$coefficients$mu[2, 4],
  summary(beta_mva85a_uninf)$coefficients$mean[2, 4]
)
p_vec_vaccine_uninf

p.adjust(p_vec_vaccine_uninf, method = "holm")
```


### Performing Simultaneous Hypothesis tests
Loading the required packages for the simulataneous test:
```{r}
#pkg_vec <- c("betareg", "car", "lmtest")
#for (x in pkg_vec) {
#  if (!requireNamespace(x, quietly = TRUE)) {
#    renv::install(x, prompt = FALSE)
#  }
#}
library(betareg)
library(car)
library(lmtest)
```

Performing the simulatenous test for infected: 
```{r}
full_model_infected <- betareg(prop_response ~ vaccine*sex, data = data_tidy_vacc_summed|>
 dplyr::filter(infxn == "infected"))

null_model_infected <- betareg(prop_response ~ vaccine, data = data_tidy_vacc_summed|>
 dplyr::filter(infxn == "infected") )

summary(full_model_infected)
summary(null_model_infected)

# p-values
p_vec_full.null_inf <- c(
  summary(full_model_infected)$coefficients$mu[-1, "Pr(>|z|)"],
  summary(null_model_infected)$coefficients$mu[-1, "Pr(>|z|)"])

p_vec_full.null_inf

p.adjust(p_vec_full.null_inf, method = "holm")

# Wald test:
wald_infected <- car::linearHypothesis(full_model_infected,
 c("sexmale= 0", "vaccineh56:sexmale=0", "vaccinemva85a:sexmale= 0"))

# Likelihood ratio test:
likelihood_infected <- lmtest::lrtest(full_model_infected, null_model_infected)

# p-values Wald and LR test
p_vec_wald.lr_inf <- c(wald_infected$`Pr(>Chisq)`[2],likelihood_infected$`Pr(>Chisq)`[2])
p_vec_wald.lr_inf

p.adjust(p_vec_wald.lr_inf, method = "holm")
```

 Performing the simulateneous test for uninfected:
```{r}
full_model_uninfected <- betareg(prop_response ~ vaccine*sex, data = data_tidy_vacc_summed|>
 dplyr::filter(infxn == "uninfected"))

null_model_uninfected <- betareg(prop_response ~ vaccine, data = data_tidy_vacc_summed|>
 dplyr::filter(infxn == "uninfected"))

summary(full_model_uninfected)
summary(null_model_uninfected)

# p-values
p_vec_full.null_uninf <- c(
  summary(full_model_uninfected)$coefficients$mu[-1, "Pr(>|z|)"],
  summary(null_model_uninfected)$coefficients$mu[-1, "Pr(>|z|)"])

p_vec_full.null_uninf

p.adjust(p_vec_full.null_uninf, method = "holm")

# Wald test: 
wald_uninfected <- car::linearHypothesis(full_model_uninfected,
 c("sexmale= 0", "vaccineh56:sexmale=0", "vaccinemva85a:sexmale= 0"))

# Likelihood ratio test:
likelihood_uninfected <- lmtest::lrtest(full_model_uninfected, null_model_uninfected)

# p-values Wald and LR test
p_vec_wald.lr_uninf <- c(wald_uninfected$`Pr(>Chisq)`[2],likelihood_uninfected$`Pr(>Chisq)`[2])
p_vec_wald.lr_uninf

p.adjust(p_vec_wald.lr_uninf, method = "holm")
```

## Response Profile
Boxplot of response profile:
```{r}
rp_box1 <- ggplot(data_tidy_vacc_profile, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_grid(vaccine + infxn ~ cyt_combn, scales = "free") +
  labs(title = "Response by Sex and Infection Status for each Cytokine Combination",
       x = "Sex",
       y = "Response") +
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "black"))     
  
  
ggsave('Profile by cytokine combination.png',rp_box1)

 #subset boxplot filtering 2 vaccines
selected_vaccines <- c('h1', 'mva85a')

# Filter the dataset
filtered_data <- data_tidy_vacc_profile %>%
  filter(vaccine %in% selected_vaccines)

profile_2 <- ggplot(filtered_data, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_grid(vaccine + infxn ~ cyt_combn, scales = "free") +
  labs(title = "Response by Sex and Infection Status for each Cytokine Combination",
       x = "Sex",
       y = "Response") +
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "black"))  

ggsave('Profile boxplot 2.png',profile_2)  
 
```

### PCA Biplot
```{r}
#create a wide format where each cytokine combination is a separate column
profile_wide <- data_tidy_vacc_profile |>
  tidyr::pivot_wider(names_from = cyt_combn, values_from = response)

# Select only the cytokine combination columns for PCA
cytokine_cols <- colnames(profile_wide)[grepl("\\+", colnames(profile_wide))]
pca_result <- prcomp(profile_wide[, cytokine_cols], scale. = TRUE)  

# combine PCA results with the original metadata
pca_data <- as.data.frame(pca_result$x) |>
  dplyr::bind_cols(profile_wide |>
  dplyr::select(vaccine, sex, infxn))

# extract PCA loadings
loadings <- as.data.frame(pca_result$rotation[, 1:2]) # Take only the first two PCs
loadings$cyt_combn <- rownames(loadings) # Add cytokine combination names

# scaling factor for arrows
arrow_scale <- 8.5  

# scale PCA loadings for arrows
scaled_loadings <- loadings |>
  dplyr::mutate(PC1 = PC1 * arrow_scale,
         PC2 = PC2 * arrow_scale)
```

```{r}
pca_plot1 <- ggplot(pca_data, aes(x = PC1, y = PC2, color = vaccine, shape = sex)) +
  geom_point(size = 3) +
  facet_wrap(~ infxn) +
  labs(title = "PCA Biplot", x = "PC1", y = "PC2") + 
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.3, "cm")), color = "black", inherit.aes = FALSE) +
  geom_text(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), nudge_x = 1.5, nudge_y = 0.4, vjust = 1, hjust = 1, color = "black", inherit.aes = FALSE) +
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "black"))     

ggsave('PCA_Biplot.png', pca_plot1, width = 12, height = 6)
```

```{r}
# calculate mean positions for each vaccine and sex combination
mean_positions <- pca_data %>%
  dplyr::group_by(vaccine, sex,infxn) %>%
  dplyr::summarize(PC1 = mean(PC1), PC2 = mean(PC2))

mean_positions <- mean_positions %>%
  dplyr::mutate(combo = paste(vaccine, sex, sep = "-"))

pca_plot2 <- ggplot(pca_data, aes(x = PC1, y = PC2, color = vaccine, shape = sex)) +
  facet_wrap(~ infxn) +
  labs(title = "PCA Biplot with Mean Positions", x = "PC1", y = "PC2") + 
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.3, "cm")), color = "black", inherit.aes = FALSE) +
  geom_text(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), 
            nudge_x = 1.5, nudge_y = 0.4, vjust = 1, hjust = 1, color = "black", 
            inherit.aes = FALSE) +
  geom_point(size = 3) +          
  geom_point(data = mean_positions, aes(x = PC1, y = PC2), shape=1,fill=NA,
             size = 4, color = "orange",stroke=1.5) +
  ggrepel::geom_text_repel(data = mean_positions, aes(x = PC1, y = PC2, label = combo), 
            nudge_x = 1, nudge_y = 0.5, vjust = 1, hjust = 1, color = "black") +
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "black"))     

ggsave('pca_ mean position.png', pca_plot2, width = 14, height = 6)
```