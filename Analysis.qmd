---
title: Analyse memory response
format:
  html:
    embed-resources: true
---

```{r}
#| include: false
library(ggplot2)
library(tibble)
library(dplyr)
library(cowplot)
theme_cowplot_bg <- function(font_size = 16) {
  theme_cowplot(font_size = font_size) +
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white")
  )
}
library(stringr)
```

## Data prep

Here we load the data:

```{r}
library(DataTidy24TBVaccSexDiff)
data("data_tidy_vacc_freq")
```

Now we calculate the summed response and the profile response, and then extract the memory response:

```{r}
data_tidy_vacc_summed <- data_tidy_vacc_freq |>
  vacc_calc_response_summed("response") |>
  vacc_calc_vaccine_induced_response("response") |>
  vacc_set_neg_to_zero("response") |>
  vacc_extract_memory() |>
  dplyr::filter(subset == "cd4")
data_tidy_vacc_summed

data_tidy_vacc_profile <- data_tidy_vacc_freq |>
  vacc_calc_response_profile("response") |>
  vacc_calc_vaccine_induced_response("response") |>
  vacc_extract_memory() |>
  dplyr::filter(subset == "cd4") |>
  dplyr::filter(
    vaccine %in% c("h1", "m72")
  )
data_tidy_vacc_profile
```

```{r}
library(cowplot)
``` 

## Respose Magnitude

### EDA 

```{r}
# Plot histogram of response magnitude grouped by vaccine and sex
hist <- ggplot(data_tidy_vacc_summed, aes(x = response, fill = sex)) +
  geom_histogram(binwidth = 1, color = "blue", position = "dodge") +
  facet_grid(vaccine ~ sex) +
  labs(title = "Histogram of Response Magnitudes by Vaccine and Sex", x = "Response Magnitude", y = "Frequency") +
  theme_cowplot_bg()
ggsave("histograms.png", hist)
```

```{r}
# Boxplot of response magnitude by grouped vaccine and sex
boxplot <- ggplot(data_tidy_vacc_summed, aes(x = vaccine, y = response, fill = sex)) +
  geom_boxplot() +
  facet_wrap(~ sex) +
  labs(title = "Boxplot of Response Magnitudes by Vaccine and Sex", x = "Vaccine", y = "Response Magnitude") +
  theme_cowplot_bg()

ggsave("boxplot by vaccine and sex.png", boxplot)
```

```{r}
boxplot_slides<- ggplot(data_tidy_vacc_summed, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_grid(vaccine ~ infxn,labeller = labeller(vaccine = toupper)) +
  labs(title = "Summed Response by Sex and Infection Status", x = "Sex", y = "Summed Response") +
  theme(
    axis.text.x = element_blank(),        # Remove x-axis text
    axis.ticks.x = element_blank(),       # Remove x-axis ticks
    panel.grid.major.x = element_blank(), # Optionally remove major x-axis grid lines
    panel.grid.minor.x = element_blank(), # Optionally remove minor x-axis grid lines
    legend.position = 'bottom',
     strip.text = element_text(size = 12,  # Adjust facet label size
    face = "bold"),
    axis.text.y = element_text(size = 13,   # Adjust y-axis title size
    face = "bold"),
    legend.text = element_text(size = 12) ) + # Set y-axis title font style             # Place legend at the bottom                   
      
  guides(fill = guide_legend(title = NULL))

# Save the plot
ggsave("Boxplot for slides.png",boxplot_slides)
```

### Kruskal-Wallis test

 - "used to determine if there are statistically significant differences between two or more groups of an independent variable on a continuous or ordinal dependent variable."

```{r}
# Kruskal-Wallis test group by vaccine and infection status
kw_test <- data_tidy_vacc_summed |>
  group_by(vaccine, infxn) |>
  summarise(
    test = list(kruskal.test(response ~ sex)),
    .groups = 'drop') |>
  mutate(
    t_stat = sapply(test, function(x) x$statistic),
    p_value = sapply(test, function(x) x$p.value))

kw_test
```

```{r}
# Summary stats after performing kruskal- wallis test
summary_stats <- data_tidy_vacc_summed |>
  group_by(vaccine,infxn, sex) |>
  summarise(
    count = n(),
    mean = mean(response),
    sd = sd(response),
    median = median(response),
    IQR = IQR(response))

summary_stats
```

### Analysis

```{r}
boxplot2 <- ggplot(data_tidy_vacc_summed, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_grid(vaccine ~ infxn) +
  labs(title = "Boxplot of Response Magnitude by Infection Status and Sex", x = "Sex", y = "Response Magnitude") +
  theme_cowplot_bg()

ggsave("boxplot by infection status and sex.png", boxplot2)
```

```{r}
boxplot3 <- ggplot(data_tidy_vacc_summed, aes(x = str_to_title(sex), y = response, fill = str_to_title(sex))) +
  geom_boxplot() +
  facet_grid(vaccine ~ str_to_title(infxn),labeller = labeller(vaccine = toupper)) +
  labs(title = "Summed Response by Sex and Infection Status", x = "Sex", y = "Summed Response") +
  theme_cowplot_bg()+
  theme(
    axis.text.x = element_blank(),        # Remove x-axis text
    axis.ticks.x = element_blank(),       # Remove x-axis ticks
    panel.grid.major.x = element_blank(), # Optionally remove major x-axis grid lines
    panel.grid.minor.x = element_blank(), # Optionally remove minor x-axis grid lines
    legend.position = 'bottom',
     strip.text = element_text(size = 12,  # Adjust facet label size
    face = "bold"),
    axis.text.y = element_text(size = 13,   # Adjust y-axis title size
    face = "bold"),
    legend.text = element_text(size = 12) ) + # Set y-axis title font style             # Place legend at the bottom                   
    background_grid(major='y')+
  guides(fill = guide_legend(title = NULL))

# Save the plot
ggsave("Boxplot_magnitude_memory.png",boxplot3)
```

Mann- Whitney Test with multiple testing error rate correction:

```{r}
mw_test <- list(
  infxn = wilcox.test(response ~ infxn, data = data_tidy_vacc_summed),
  sex = wilcox.test(response ~ sex, data = data_tidy_vacc_summed)
)
mw_tbl_summed <- purrr::map_df(unique(data_tidy_vacc_summed$infxn), function(infxn) {
  data_tidy_vacc_sub <- data_tidy_vacc_summed |>
    dplyr::filter(infxn == .env$infxn)
  purrr::map_df(unique(data_tidy_vacc_sub$vaccine), function(vaccine) {
    data_tidy_vacc_sub_sub <- data_tidy_vacc_sub |>
      dplyr::filter(vaccine == .env$vaccine)
    # browser()
    resp_vec_male <- data_tidy_vacc_sub_sub |>
      dplyr::filter(sex == "male") |>
      dplyr::pull(response)
    resp_vec_female <- data_tidy_vacc_sub_sub |>
      dplyr::filter(sex == "female") |>
      dplyr::pull(response)
    p_val <- wilcox.test(resp_vec_male, resp_vec_female)$p.value
    tibble::tibble(
      infxn = infxn, vaccine = vaccine, p_val = p_val
    )
  })
})

mw_tbl_summed <- mw_tbl_summed |>
  dplyr::group_by(infxn) |>
  dplyr::mutate(q_val = p.adjust(p_val, method = "holm")) |>
  dplyr::ungroup()
mw_tbl_summed
```

Taking the square root of the summed response:

```{r}
#data_tidy_vacc_summed <- data_tidy_vacc_summed |>
  #mutate(sqrt_response = sqrt(response))
```

### Betareg Model

```{r}
# Install and load package
pkg_vec <- c("betareg", "statmod", "numDeriv")
for (x in pkg_vec) {
  if (!requireNamespace(x, quietly = TRUE)) {
    install.packages(x, dependencies = TRUE)
  }
}
library(betareg)
library(statmod)
library(numDeriv)
```

Transform the response magnitude to range between 0 and 1 and taking the sqrt
```{r}
data_tidy_vacc_summed <- data_tidy_vacc_summed |>
  mutate(prop_response = sqrt(response / 100))
```

#### Simple regression

##### Infected

```{r}
# Betareg model for each vaccine and p-values
data_tidy_vacc_summed_inf <- data_tidy_vacc_summed |>  
    dplyr::filter(infxn == "infected") 

beta_h1_inf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_inf |>
    dplyr::filter(vaccine == "h1")) 

beta_h56_inf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_inf |> 
   dplyr::filter(vaccine == "h56")) 

beta_mva85a_inf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_inf |> 
   dplyr::filter(vaccine == "mva85a"))
beta_m72_inf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_inf |> 
   dplyr::filter(vaccine == "m72"))

p_vec_vaccine_inf <- c(
  summary(beta_h1_inf)$coefficients$mu[2, 4],
  summary(beta_h56_inf)$coefficients$mu[2, 4],
  summary(beta_mva85a_inf)$coefficients$mu[2, 4],
  summary(beta_m72_inf)$coefficients$mean[2, 4]
)
p_vec_vaccine_inf

p.adjust(p_vec_vaccine_inf, method = "holm")
```

##### Uninfected

Fitting the Beta Regression model for uninfected: 

```{r}
model_uninfected <- betareg(prop_response ~ vaccine*sex, data_tidy_vacc_summed|> dplyr::filter(infxn == "uninfected"))

model_uninfected <- betareg(
  prop_response ~ vaccine*sex,
  data_tidy_vacc_summed |> 
    dplyr::filter(infxn =="uninfected") |>
    dplyr::mutate(vaccine = factor(.data$vaccine, levels = c("h56", "h1", "mva85a", "m72"))))

summary(model_uninfected)

# Plotting Residuals for uninfected
png("residuals_uninf_memory.png")
plot(model_uninfected$residuals, main = "", ylab= "Residuals", xlab = "Index")
abline (h=0, col = "red", lwd= 2)
dev.off()

# Betareg models for each vaccine and p-values
data_tidy_vacc_summed_uninf <- data_tidy_vacc_summed |>  
    dplyr::filter(infxn == "uninfected") 

beta_h1_uninf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_uninf |>
    dplyr::filter(vaccine == "h1")) 

beta_h56_uninf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_uninf |> 
   dplyr::filter(vaccine == "h56")) 

beta_mva85a_uninf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_uninf |> 
   dplyr::filter(vaccine == "mva85a"))
beta_m72_uninf <- betareg(prop_response ~ sex, data = data_tidy_vacc_summed_uninf |> 
   dplyr::filter(vaccine == "m72"))

p_vec_vaccine_uninf <- c(
  summary(beta_h1_uninf)$coefficients$mu[2, 4],
  summary(beta_h56_uninf)$coefficients$mu[2, 4],
  summary(beta_mva85a_uninf)$coefficients$mean[2, 4],
  summary(beta_m72_uninf)$coefficients$mu[2, 4]
)

p_vec_vaccine_uninf

p.adjust(p_vec_vaccine_uninf, method = "holm")
```

#### Multiple regression

##### Residuals
Fitting the Beta Regression model for infected:

```{r}
model_infected <- betareg(prop_response ~ vaccine*sex,
                  data_tidy_vacc_summed |> dplyr::filter(infxn =="infected"))

summary(model_infected)

model_infected <- betareg(
  prop_response ~ vaccine*sex,
  data_tidy_vacc_summed |> 
    dplyr::filter(infxn =="infected") |>
    dplyr::mutate(vaccine = factor(.data$vaccine, levels = c("h56", "h1", "mva85a", "m72"))))

summary(model_infected)

# Plotting the residuals for infected
png("residuals_inf_memory.png")
plot(model_infected$residuals, main = "", ylab= "Residuals", xlab = " Index")
abline(h= 0, col= "red", lwd= 2)
dev.off()
```

Exploration of Residuals for uninfected Individuals:

```{r}
# Add residuals to the dataset
data_uninfected_residuals <-  data_tidy_vacc_summed %>%
  dplyr::filter(infxn == "uninfected") %>%
  dplyr::mutate(residuals = model_uninfected$residuals)

# Summarize residuals by vaccine
residual_summary <- data_uninfected_residuals |> 
  dplyr::group_by(vaccine) |> 
  dplyr::summarise(mean_residual = mean(residuals, na.rm = TRUE),
                   sd_residual = sd(residuals, na.rm = TRUE),
                   min_residual = min(residuals, na.rm = TRUE),
                   max_residual = max(residuals, na.rm = TRUE))

# Boxplot of residuals by vaccine
residual_vacc_uninf <- ggplot(data_uninfected_residuals, aes(x = vaccine, y = residuals, fill = vaccine))+
  geom_boxplot() +
  labs(y = "Residuals", x = "Vaccine") +
  scale_x_discrete(labels = toupper) +
  scale_fill_manual(
    values = c("h56" = "red", "h1" = "blue", "mva85a" = "purple", "m72" = "green"),  # Capitalized keys
    labels = c("H56", "H1", "MVA85A", "M72")  # Capitalized labels for the legend
  ) +
  theme_cowplot_bg()+
  guides(fill = guide_legend(title = "Vaccine"))  # Set the legend title to "Vaccine"
ggsave('Residual by Vaccine for Uninfected Individuals_memory.png', residual_vacc_uninf)

# Q-Q plot for the residuals of the beta regression model
png("QQ_Uninf_memory.png")
qqnorm(model_uninfected$residuals,main="")
qqline(model_uninfected$residuals, col = "red", lwd = 2)
dev.off()
```

Exploration of Residuals for infected Individuals:

```{r}
# Add residuals to the dataset
data_infected_residuals <-  data_tidy_vacc_summed %>%
  dplyr::filter(infxn == "infected") %>%
  dplyr::mutate(residuals = model_infected$residuals)

# Summarize residuals by vaccine
residual_summary <- data_infected_residuals |> 
  dplyr::group_by(vaccine) |> 
  dplyr::summarise(mean_residual = mean(residuals, na.rm = TRUE),
                   sd_residual = sd(residuals, na.rm = TRUE),
                   min_residual = min(residuals, na.rm = TRUE),
                   max_residual = max(residuals, na.rm = TRUE))

# Boxplot of residuals by vaccine
residual_vacc_inf <- ggplot(data_infected_residuals, aes(x = vaccine, y = residuals, fill = vaccine)) +
  geom_boxplot() +
  labs(y = "Residuals", x = "Vaccine") +
  scale_x_discrete(labels = toupper) +
  scale_fill_manual(
    values = c("h56" = "red", "h1" = "blue", "mva85a" = "purple", "m72" = "green"),  # Capitalized keys
    labels = c("H56", "H1", "MVA85A", "M72")  # Capitalized labels for the legend
  ) +
  theme_cowplot_bg() +
  guides(fill = guide_legend(title = "Vaccine"))  # Set the legend title to "Vaccine"
ggsave('Residual by Vaccine for Infected Individuals_memory.png',residual_vacc_inf)

# Q-Q plot for the residuals of the beta regression model
png("QQ_Inf_memory.png")
qqnorm(model_infected$residuals,main="")
qqline(model_infected$residuals, col = "red", lwd = 2)
dev.off()
```

##### Global test for sex effect for at least one vaccine

Loading the required packages for the simulataneous test:
```{r}
#pkg_vec <- c("betareg", "car", "lmtest")
#for (x in pkg_vec) {
#  if (!requireNamespace(x, quietly = TRUE)) {
#    renv::install(x, prompt = FALSE)
#  }
#}
library(betareg)
library(car)
library(lmtest)
```

Performing the simulatenous test for infected: 
```{r}
full_model_infected <- betareg(prop_response ~ vaccine*sex, data = data_tidy_vacc_summed|>
 dplyr::filter(infxn == "infected"))

null_model_infected <- betareg(prop_response ~ vaccine, data = data_tidy_vacc_summed|>
 dplyr::filter(infxn == "infected") )

summary(full_model_infected)
summary(null_model_infected)

# p-values
p_vec_full.null_inf <- c(
  summary(full_model_infected)$coefficients$mu[-1, "Pr(>|z|)"],
  summary(null_model_infected)$coefficients$mu[-1, "Pr(>|z|)"])

p_vec_full.null_inf

p.adjust(p_vec_full.null_inf, method = "holm")

# Wald test:
wald_infected <- car::linearHypothesis(full_model_infected,
 c("sexmale= 0", "vaccineh56:sexmale=0", "vaccinemva85a:sexmale= 0", "vaccinem72:sexmale= 0"))

# Likelihood ratio test:
likelihood_infected <- lmtest::lrtest(full_model_infected, null_model_infected)

# p-values Wald and LR test
p_vec_wald.lr_inf <- c(wald_infected$`Pr(>Chisq)`[2],likelihood_infected$`Pr(>Chisq)`[2])
p_vec_wald.lr_inf

p.adjust(p_vec_wald.lr_inf, method = "holm")
```

 Performing the simulateneous test for uninfected:
```{r}
full_model_uninfected <- betareg(prop_response ~ vaccine*sex, data = data_tidy_vacc_summed|>
 dplyr::filter(infxn == "uninfected"))

null_model_uninfected <- betareg(prop_response ~ vaccine, data = data_tidy_vacc_summed|>
 dplyr::filter(infxn == "uninfected"))

summary(full_model_uninfected)
summary(null_model_uninfected)

# p-values
p_vec_full.null_uninf <- c(
  summary(full_model_uninfected)$coefficients$mu[-1, "Pr(>|z|)"],
  summary(null_model_uninfected)$coefficients$mu[-1, "Pr(>|z|)"])

p_vec_full.null_uninf

p.adjust(p_vec_full.null_uninf, method = "holm")

# Wald test: 
wald_uninfected <- car::linearHypothesis(full_model_uninfected,
 c("sexmale= 0", "vaccineh56:sexmale=0", "vaccinemva85a:sexmale= 0", "vaccinem72:sexmale= 0"))

# Likelihood ratio test:
likelihood_uninfected <- lmtest::lrtest(full_model_uninfected, null_model_uninfected)

# p-values Wald and LR test
p_vec_wald.lr_uninf <- c(wald_uninfected$`Pr(>Chisq)`[2],likelihood_uninfected$`Pr(>Chisq)`[2])
p_vec_wald.lr_uninf

p.adjust(p_vec_wald.lr_uninf, method = "holm")
```

##### Getting per-vaccine sex effect estimates and inference

###### Infected

```{r}
# Betareg model for each vaccine and p-values
data_tidy_vacc_summed_inf <- data_tidy_vacc_summed |>  
    dplyr::filter(infxn == "infected") 

beta_h1_inf <- betareg(
  prop_response ~ sex*vaccine,
  data = data_tidy_vacc_summed_inf |>
    dplyr::mutate(
      vaccine = factor(vaccine, levels = c("h1", "h56", "mva85a", "m72"))
    )
  )
est_h1 <- summary(beta_h1_inf)$coefficients[[1]][2, 1]
p_val_h1 <- summary(beta_h1_inf)$coefficients[[1]][2, 4]
ci_h1 <- confint(beta_h1_inf)[2, ]
h1_row <- tibble(
  Vaccine = "H1",
  Estimate = est_h1,
  `P-value` = p_val_h1,
  `95% CI Lower` = ci_h1[1],
  `95% CI Upper` = ci_h1[2]
)

beta_h56_inf <- betareg(
  prop_response ~ sex*vaccine,
  data = data_tidy_vacc_summed_inf |>
    dplyr::mutate(
      vaccine = factor(vaccine, levels = c("h56", "h1", "mva85a", "m72"))
    )
  )
est_h56 <- summary(beta_h56_inf)$coefficients[[1]][2, 1]
p_val_h56 <- summary(beta_h56_inf)$coefficients[[1]][2, 4]
ci_h56 <- confint(beta_h56_inf)[2, ]
h56_row <- tibble(
  Vaccine = "H56",
  Estimate = est_h56,
  `P-value` = p_val_h56,
  `95% CI Lower` = ci_h56[1],
  `95% CI Upper` = ci_h56[2]
)

beta_mva85a_inf <- betareg(
  prop_response ~ sex*vaccine, 
  data = data_tidy_vacc_summed_inf |>
    dplyr::mutate(
      vaccine = factor(vaccine, levels = c("mva85a", "h1", "h56", "m72"))
    )
  )
est_mva85a <- summary(beta_mva85a_inf)$coefficients[[1]][2, 1]
p_val_mva85a <- summary(beta_mva85a_inf)$coefficients[[1]][2, 4]
ci_mva85a <- confint(beta_mva85a_inf)[2, ]
mva85a_row <- tibble(
  Vaccine = "MVA85A",
  Estimate = est_mva85a,
  `P-value` = p_val_mva85a,
  `95% CI Lower` = ci_mva85a[1],
  `95% CI Upper` = ci_mva85a[2]
)

beta_m72_inf <- betareg(
  prop_response ~ sex * vaccine,
  data = data_tidy_vacc_summed_inf |>
    dplyr::mutate(
      vaccine = factor(vaccine, levels = c("m72", "h1", "h56", "mva85a"))
    )
  )
est_m72 <- summary(beta_m72_inf)$coefficients[[1]][2, 1]
p_val_m72 <- summary(beta_m72_inf)$coefficients[[1]][2, 4]
ci_m72 <- confint(beta_m72_inf)[2, ]
m72_row <- tibble(
  Vaccine = "M72",
  Estimate = est_m72,
  `P-value` = p_val_m72,
  `95% CI Lower` = ci_m72[1],
  `95% CI Upper` = ci_m72[2]
)

inf_tbl_inf <- bind_rows(h1_row, h56_row, mva85a_row, m72_row)

inf_tbl_inf <- inf_tbl_inf |>
  dplyr::mutate(`Q-value` = p.adjust(`P-value`, method = "holm")) |>
  dplyr::select(Vaccine, Estimate, `P-value`, `Q-value`, `95% CI Lower`, `95% CI Upper`)

inf_tbl_inf <- inf_tbl_inf |>
  dplyr::mutate(
    `P-value` = ifelse(`P-value` < 0.001, "<0.001", round(`P-value`, 3))
  )

# Plot with p-values
p_inf <- ggplot(
  inf_tbl_inf,
  aes(
    x = Vaccine,
    y = Estimate,
    ymin = `95% CI Lower`,
    ymax = `95% CI Upper`,
    color = Vaccine
  )
) +
  theme_cowplot_bg() +
  cowplot::background_grid(major = "y") + 
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  geom_pointrange() +
  labs(x = "Vaccine", y = "Sex effect") +
  geom_errorbar(aes(ymin = `95% CI Lower`, ymax = `95% CI Upper`), width = 0.1) +
  scale_color_manual(
    values = c("H56" = "red", "H1" = "blue", "MVA85A" = "purple", "M72" = "green")
  ) +
  scale_y_continuous(limits = c(NA, 1.5)) +
  theme(
    legend.position = "none",
    axis.title.x = element_text(size = 20),  # Increase x-axis label size
    axis.title.y = element_text(size = 20),   # Increase y-axis label size
    axis.text.x = element_text(size = 19),   # Adjust x-axis tick label size
    axis.text.y = element_text(size = 19)  
  ) +
  # Add p-value text labels
  geom_text(
    aes(label = `P-value`, y =  `95% CI Upper`+0.04), # Adjust the y position for better placement
    vjust = -0.5,
    size = 6,
    color = "black"
  )

path_fig_inf <- "Plot of estimates of effect sizes and CI infected_memory.pdf"
ggsave(
  path_fig_inf,
  p_inf,
  width = 10,
  height = 6
)
```

###### Uninfected

```{r}
# Filter for uninfected individuals
data_tidy_vacc_summed_uninf <- data_tidy_vacc_summed |>  
    dplyr::filter(infxn == "uninfected")

# Betareg model and estimates for H1 vaccine
beta_h1_uninf <- betareg(
  prop_response ~ sex*vaccine,
  data = data_tidy_vacc_summed_uninf |>
    dplyr::mutate(
      vaccine = factor(vaccine, levels = c("h1", "h56", "mva85a", "m72"))
    )
  )
est_h1_uninf <- summary(beta_h1_uninf)$coefficients[[1]][2, 1]
p_val_h1_uninf <- summary(beta_h1_uninf)$coefficients[[1]][2, 4]
ci_h1_uninf <- confint(beta_h1_uninf)[2, ]
h1_row_uninf <- tibble(
  Vaccine = "H1",
  Estimate = est_h1_uninf,
  `P-value` = p_val_h1_uninf,
  `95% CI Lower` = ci_h1_uninf[1],
  `95% CI Upper` = ci_h1_uninf[2]
)

# Betareg model and estimates for H56 vaccine
beta_h56_uninf <- betareg(
  prop_response ~ sex*vaccine,
  data = data_tidy_vacc_summed_uninf |>
    dplyr::mutate(
      vaccine = factor(vaccine, levels = c("h56", "h1", "mva85a", "m72"))
    )
  )
est_h56_uninf <- summary(beta_h56_uninf)$coefficients[[1]][2, 1]
p_val_h56_uninf <- summary(beta_h56_uninf)$coefficients[[1]][2, 4]
ci_h56_uninf <- confint(beta_h56_uninf)[2, ]
h56_row_uninf <- tibble(
  Vaccine = "H56",
  Estimate = est_h56_uninf,
  `P-value` = p_val_h56_uninf,
  `95% CI Lower` = ci_h56_uninf[1],
  `95% CI Upper` = ci_h56_uninf[2]
)

# Betareg model and estimates for MVA85A vaccine
beta_mva85a_uninf <- betareg(
  prop_response ~ sex*vaccine, 
  data = data_tidy_vacc_summed_uninf |>
    dplyr::mutate(
      vaccine = factor(vaccine, levels = c("mva85a", "h1", "h56", "m72"))
    )
  )
est_mva85a_uninf <- summary(beta_mva85a_uninf)$coefficients[[1]][2, 1]
p_val_mva85a_uninf <- summary(beta_mva85a_uninf)$coefficients[[1]][2, 4]
ci_mva85a_uninf <- confint(beta_mva85a_uninf)[2, ]
mva85a_row_uninf <- tibble(
  Vaccine = "MVA85A",
  Estimate = est_mva85a_uninf,
  `P-value` = p_val_mva85a_uninf,
  `95% CI Lower` = ci_mva85a_uninf[1],
  `95% CI Upper` = ci_mva85a_uninf[2]
)

# Betareg model and estimates for M72 vaccine
beta_m72_uninf <- betareg(
  prop_response ~ sex * vaccine,
  data = data_tidy_vacc_summed_uninf |>
    dplyr::mutate(
      vaccine = factor(vaccine, levels = c("m72", "h1", "h56", "mva85a"))
    )
  )
est_m72_uninf <- summary(beta_m72_uninf)$coefficients[[1]][2, 1]
p_val_m72_uninf <- summary(beta_m72_uninf)$coefficients[[1]][2, 4]
ci_m72_uninf <- confint(beta_m72_uninf)[2, ]
m72_row_uninf <- tibble(
  Vaccine = "M72",
  Estimate = est_m72_uninf,
  `P-value` = p_val_m72_uninf,
  `95% CI Lower` = ci_m72_uninf[1],
  `95% CI Upper` = ci_m72_uninf[2]
)

# Combine results into a single table
inf_tbl_uninf <- bind_rows(h1_row_uninf, h56_row_uninf, mva85a_row_uninf, m72_row_uninf)

# Adjust p-values for multiple comparisons
inf_tbl_uninf <- inf_tbl_uninf |>
  dplyr::mutate(`Q-value` = p.adjust(`P-value`, method = "holm")) |>
  dplyr::select(Vaccine, Estimate, `P-value`, `Q-value`, `95% CI Lower`, `95% CI Upper`)

# Round and format p-values
inf_tbl_uninf <- inf_tbl_uninf |>
  dplyr::mutate(
    `P-value` = ifelse(`P-value` < 0.001, "<0.001", round(`P-value`, 3))
  )

# Plot with p-values for uninfected group
p_uninf <- ggplot(
  inf_tbl_uninf,
  aes(
    x = Vaccine,
    y = Estimate,
    ymin = `95% CI Lower`,
    ymax = `95% CI Upper`,
    color = Vaccine
  )
) +
  theme_cowplot_bg() +
  cowplot::background_grid(major = "y") + 
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  geom_pointrange() +
  labs(x = "Vaccine", y = "Sex effect") +
  geom_errorbar(aes(ymin = `95% CI Lower`, ymax = `95% CI Upper`), width = 0.1) +
  scale_color_manual(
    values = c("H56" = "red", "H1" = "blue", "MVA85A" = "purple", "M72" = "green")
  scale_y_continuous(limits = c(NA, 1.0)) +
  theme(
    legend.position = "none",
    axis.title.x = element_text(size = 20),  # Increase x-axis label size
    axis.title.y = element_text(size = 20),   # Increase y-axis label size
    axis.text.x = element_text(size = 19),   # Adjust x-axis tick label size
    axis.text.y = element_text(size = 19)  
  ) +
  geom_text(
    aes(label = `P-value`, y = `95% CI Upper` + 0.04),
    vjust = -0.5,
    size = 6,
    color = "black"
  ) 

# Save the plot for uninfected group
path_fig_uninf <- "Plot of estimates of effect sizes and CI uninfected_memory.pdf"
ggsave(
  path_fig_uninf,
  p_uninf,
  width = 10,
  height = 6
)
```
